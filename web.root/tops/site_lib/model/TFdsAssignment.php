<?php
require_once("tops_lib/model/TEntityObject.php");

class TFdsAssignment extends TEntityObject
{
    // -- Generated by tools/newentity.php
    public function  __construct()
    {
        $this->tableName = 'fdsassignments';
        $this->idFieldName = 'id';
        $this->addField('id',INT_FIELD);
        $this->addField('assignmentDate',DATE_FIELD);
        $this->addField('personId',INT_FIELD);
        $this->addField('ageGroupId',INT_FIELD);
        $this->addField('note',STRING_FIELD);
        $this->addField('role',INT_FIELD);
    }  //  TFdsAssignment

    const recordStateNew = 1;
    const recordStateUnchanged = 0;
    const recordStateUpdated = 2;
    const recordStateDeleted = -1;

    function getAssignmentDate() {
        return $this->get('assignmentDate');
    }
    function setAssignmentDate($value) {
        $this->setFieldValue('assignmentDate',$value);
    }

    function getPersonId() {
        return $this->get('personId');
    }
    function setPersonId($value) {
        $this->setFieldValue('personId',$value);
    }

    function getAgeGroupId() {
        return $this->get('ageGroupId');
    }
    function setAgeGroupId($value) {
        $this->setFieldValue('ageGroupId',$value);
    }

    function getNote() {
        return $this->get('note');
    }
    function setNote($value) {
        $this->setFieldValue('note',$value);
    }

    function getRole() {
        return $this->get('role');
    }
    function setRole($value) {
        $this->setFieldValue('role',$value);
    }
    // -- end generated code


    public static function GetNotificationsList($assignmentDate)
    {
        $result = array();
        $day = strtotime($assignmentDate);
        if (date('w', $day) != 0) {
            $day = strtotime("next Sunday", $day);
        }
        $assignmentDate = date('Y-m-d', $day);

        $sql = "SELECT DISTINCT a.name AS AgeGroup, CONCAT(p.`firstName`,' ', p.`lastName`,' <',p.`email`,'>') AS address, " .
            "CASE WHEN f.role = 1 THEN 'teach' ELSE 'assist with' END AS roleText ".
            'FROM fdsassignments f ' .
            'JOIN fdsagegroups a ON f.ageGroupId = a.id ' .
            'JOIN persons p ON p.personID = f.personId ' .
            'WHERE f.assignmentDate = ?';

        $statement = TSqlStatement::ExecuteQuery($sql, 's', $assignmentDate);
        $ageGroup = '';
        $address = '';
        $role = '';
        $statement->instance->bind_result(
            $ageGroup,
            $address,
            $role);
        while ($statement->next()) {
            $item = new stdClass();
            $item->ageGroup = $ageGroup;
            $item->address = $address;
            $item->role = $role;
            array_push($result,$item);
        };
        return $result;
    }



    /**
     * @param $startDate
     * @param $endDate
     * @return array
     * @throws DatabaseException
     */
    public static function GetAssignmentList($startDate, $endDate)
    {
        $sql =
            'SELECT a.id, assignmentDate, a.personId, a.ageGroupId, a.note, a.role '
            .'FROM fdsassignments a where assignmentDate BETWEEN ? AND ? ORDER by assignmentDate';

        $statement = TSqlStatement::ExecuteQuery($sql, 'ss', $startDate, $endDate);

        $id = 0;
        $assignmentDate = '';
        $personId = 1;
        $ageGroupId = 1;
        $note = '';
        $role = '';


        $statement->instance->bind_result(
            $id,
            $assignmentDate,
            $personId,
            $ageGroupId,
            $note,
            $role);

        $result = array();

        while ($statement->next()) {
            $item = new FdsAssignmentDto(); //new stdclass();
            $item->id = $id;
            $item->assignmentDate = $assignmentDate;
            $item->personId = $personId;
            $item->ageGroupId = $ageGroupId;
            $item->role = $role;
            $item->note = $note;
            $item->state = 0;
            array_push($result, $item);
        }
        return $result;

    }




    private static function selectAssignment(TFdsAssignment $assignment, int $assignmentId ) {
        $assignment->select($assignmentId);
        if ($assignment->getId() == $assignmentId) {
            return true;
        }
        return false;

    }

    private static function setAssignmentProperties(TFdsAssignment $assignment, FdsAssignmentDto $assignmentData )
    {
        $assignment->setPersonId($assignmentData->personID);
        $assignment->setNote($assignmentData->note);
        $assignment->setAssignmentDate($assignmentData->assignmentDate);
        $assignment->setAgeGroupId($assignmentData->ageGroupId);
        $assignment->setRole($assignmentData->role);
    }

    private static function deleteAssignment(TFdsAssignment $assignment, FdsAssignmentDto $assignmentData)
    {
        $assignment->select($assignmentData->id);
        if ($assignment->getId() != $assignmentData->id) {
            return false;
        }
        $assignment->delete();
        return true;
    }
    /**
     * @param FdsAssignmentDto $assignmentData
     * @return bool
     */
    public static function UpdateAssignment(FdsAssignmentDto $assignmentData) {
        if ($assignmentData->state == self::recordStateUnchanged) {
            return false;
        }
        $assignment = new TFdsAssignment();

        if ($assignmentData->state == self::recordStateNew) {
            self::setAssignmentProperties($assignment, $assignmentData);
            $assignment->add();
            return true;
        }
        else if ($assignmentData->state == recordStateUpdate) {
            if (self::selectAssignment($assignment, $assignmentData->id)) {
                self::setAssignmentProperties($assignment, $assignmentData);
                $assignment->update();
                return true;
            }
        }
        else if ($assignmentData->state == self::recordStateDeleted) {
                if (self::selectAssignment($assignment,$assignmentData->id)) {
                    $assignment->delete();
                    return true;
                };
        };

        return false;
    }

    public static function RemoveAssignment($assignmentId)
    {
        $assignment = new TFdsAssignment();
        $assignment->select($assignmentId);

        if ($assignment->getId() == $assignmentId) {
            $assignment->delete();
        }
    }

} // end class

